// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	context "context"

	slackbot "github.com/clambin/tado-exporter/pkg/slackbot"
	mock "github.com/stretchr/testify/mock"
)

// SlackBot is an autogenerated mock type for the SlackBot type
type SlackBot struct {
	mock.Mock
}

// GetPostChannel provides a mock function with given fields:
func (_m *SlackBot) GetPostChannel() slackbot.PostChannel {
	ret := _m.Called()

	var r0 slackbot.PostChannel
	if rf, ok := ret.Get(0).(func() slackbot.PostChannel); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(slackbot.PostChannel)
		}
	}

	return r0
}

// RegisterCallback provides a mock function with given fields: command, commandFunc
func (_m *SlackBot) RegisterCallback(command string, commandFunc slackbot.CommandFunc) {
	_m.Called(command, commandFunc)
}

// Run provides a mock function with given fields: ctx
func (_m *SlackBot) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: channel, color, title, text
func (_m *SlackBot) Send(channel string, color string, title string, text string) error {
	ret := _m.Called(channel, color, title, text)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(channel, color, title, text)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewSlackBot interface {
	mock.TestingT
	Cleanup(func())
}

// NewSlackBot creates a new instance of SlackBot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSlackBot(t mockConstructorTestingTNewSlackBot) *SlackBot {
	mock := &SlackBot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
