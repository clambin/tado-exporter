// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tado "github.com/clambin/tado"
)

// TadoGetter is an autogenerated mock type for the TadoGetter type
type TadoGetter struct {
	mock.Mock
}

// GetHomeState provides a mock function with given fields: ctx
func (_m *TadoGetter) GetHomeState(ctx context.Context) (tado.HomeState, error) {
	ret := _m.Called(ctx)

	var r0 tado.HomeState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (tado.HomeState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) tado.HomeState); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(tado.HomeState)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMobileDevices provides a mock function with given fields: _a0
func (_m *TadoGetter) GetMobileDevices(_a0 context.Context) ([]tado.MobileDevice, error) {
	ret := _m.Called(_a0)

	var r0 []tado.MobileDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]tado.MobileDevice, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []tado.MobileDevice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.MobileDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeatherInfo provides a mock function with given fields: _a0
func (_m *TadoGetter) GetWeatherInfo(_a0 context.Context) (tado.WeatherInfo, error) {
	ret := _m.Called(_a0)

	var r0 tado.WeatherInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (tado.WeatherInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) tado.WeatherInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.WeatherInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZoneInfo provides a mock function with given fields: _a0, _a1
func (_m *TadoGetter) GetZoneInfo(_a0 context.Context, _a1 int) (tado.ZoneInfo, error) {
	ret := _m.Called(_a0, _a1)

	var r0 tado.ZoneInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (tado.ZoneInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) tado.ZoneInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tado.ZoneInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetZones provides a mock function with given fields: _a0
func (_m *TadoGetter) GetZones(_a0 context.Context) (tado.Zones, error) {
	ret := _m.Called(_a0)

	var r0 tado.Zones
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (tado.Zones, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) tado.Zones); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tado.Zones)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTadoGetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewTadoGetter creates a new instance of TadoGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTadoGetter(t mockConstructorTestingTNewTadoGetter) *TadoGetter {
	mock := &TadoGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
