// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	poller "github.com/clambin/tado-exporter/poller"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Poller is an autogenerated mock type for the Poller type
type Poller struct {
	mock.Mock
}

// Refresh provides a mock function with given fields:
func (_m *Poller) Refresh() {
	_m.Called()
}

// Register provides a mock function with given fields: ch
func (_m *Poller) Register(ch chan *poller.Update) {
	_m.Called(ch)
}

// Run provides a mock function with given fields: ctx, interval
func (_m *Poller) Run(ctx context.Context, interval time.Duration) {
	_m.Called(ctx, interval)
}

// Unregister provides a mock function with given fields: ch
func (_m *Poller) Unregister(ch chan *poller.Update) {
	_m.Called(ch)
}

type mockConstructorTestingTNewPoller interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoller creates a new instance of Poller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoller(t mockConstructorTestingTNewPoller) *Poller {
	mock := &Poller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
