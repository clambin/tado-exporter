// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	poller "github.com/clambin/tado-exporter/poller"
	mock "github.com/stretchr/testify/mock"
)

// Poller is an autogenerated mock type for the Poller type
type Poller struct {
	mock.Mock
}

type Poller_Expecter struct {
	mock *mock.Mock
}

func (_m *Poller) EXPECT() *Poller_Expecter {
	return &Poller_Expecter{mock: &_m.Mock}
}

// Refresh provides a mock function with given fields:
func (_m *Poller) Refresh() {
	_m.Called()
}

// Poller_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Poller_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
func (_e *Poller_Expecter) Refresh() *Poller_Refresh_Call {
	return &Poller_Refresh_Call{Call: _e.mock.On("Refresh")}
}

func (_c *Poller_Refresh_Call) Run(run func()) *Poller_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Poller_Refresh_Call) Return() *Poller_Refresh_Call {
	_c.Call.Return()
	return _c
}

func (_c *Poller_Refresh_Call) RunAndReturn(run func()) *Poller_Refresh_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields:
func (_m *Poller) Register() chan *poller.Update {
	ret := _m.Called()

	var r0 chan *poller.Update
	if rf, ok := ret.Get(0).(func() chan *poller.Update); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *poller.Update)
		}
	}

	return r0
}

// Poller_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Poller_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
func (_e *Poller_Expecter) Register() *Poller_Register_Call {
	return &Poller_Register_Call{Call: _e.mock.On("Register")}
}

func (_c *Poller_Register_Call) Run(run func()) *Poller_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Poller_Register_Call) Return(_a0 chan *poller.Update) *Poller_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Poller_Register_Call) RunAndReturn(run func() chan *poller.Update) *Poller_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Run provides a mock function with given fields: ctx
func (_m *Poller) Run(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Poller_Run_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Run'
type Poller_Run_Call struct {
	*mock.Call
}

// Run is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Poller_Expecter) Run(ctx interface{}) *Poller_Run_Call {
	return &Poller_Run_Call{Call: _e.mock.On("Run", ctx)}
}

func (_c *Poller_Run_Call) Run(run func(ctx context.Context)) *Poller_Run_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Poller_Run_Call) Return(_a0 error) *Poller_Run_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Poller_Run_Call) RunAndReturn(run func(context.Context) error) *Poller_Run_Call {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: ch
func (_m *Poller) Unregister(ch chan *poller.Update) {
	_m.Called(ch)
}

// Poller_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type Poller_Unregister_Call struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - ch chan *poller.Update
func (_e *Poller_Expecter) Unregister(ch interface{}) *Poller_Unregister_Call {
	return &Poller_Unregister_Call{Call: _e.mock.On("Unregister", ch)}
}

func (_c *Poller_Unregister_Call) Run(run func(ch chan *poller.Update)) *Poller_Unregister_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan *poller.Update))
	})
	return _c
}

func (_c *Poller_Unregister_Call) Return() *Poller_Unregister_Call {
	_c.Call.Return()
	return _c
}

func (_c *Poller_Unregister_Call) RunAndReturn(run func(chan *poller.Update)) *Poller_Unregister_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoller creates a new instance of Poller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Poller {
	mock := &Poller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
