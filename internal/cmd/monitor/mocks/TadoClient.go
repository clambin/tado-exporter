// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tado "github.com/clambin/tado"

	time "time"
)

// TadoClient is an autogenerated mock type for the TadoClient type
type TadoClient struct {
	mock.Mock
}

type TadoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TadoClient) EXPECT() *TadoClient_Expecter {
	return &TadoClient_Expecter{mock: &_m.Mock}
}

// DeleteZoneOverlay provides a mock function with given fields: _a0, _a1
func (_m *TadoClient) DeleteZoneOverlay(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteZoneOverlay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoClient_DeleteZoneOverlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteZoneOverlay'
type TadoClient_DeleteZoneOverlay_Call struct {
	*mock.Call
}

// DeleteZoneOverlay is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *TadoClient_Expecter) DeleteZoneOverlay(_a0 interface{}, _a1 interface{}) *TadoClient_DeleteZoneOverlay_Call {
	return &TadoClient_DeleteZoneOverlay_Call{Call: _e.mock.On("DeleteZoneOverlay", _a0, _a1)}
}

func (_c *TadoClient_DeleteZoneOverlay_Call) Run(run func(_a0 context.Context, _a1 int)) *TadoClient_DeleteZoneOverlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TadoClient_DeleteZoneOverlay_Call) Return(_a0 error) *TadoClient_DeleteZoneOverlay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoClient_DeleteZoneOverlay_Call) RunAndReturn(run func(context.Context, int) error) *TadoClient_DeleteZoneOverlay_Call {
	_c.Call.Return(run)
	return _c
}

// GetHomeState provides a mock function with given fields: ctx
func (_m *TadoClient) GetHomeState(ctx context.Context) (tado.HomeState, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetHomeState")
	}

	var r0 tado.HomeState
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (tado.HomeState, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) tado.HomeState); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(tado.HomeState)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_GetHomeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetHomeState'
type TadoClient_GetHomeState_Call struct {
	*mock.Call
}

// GetHomeState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TadoClient_Expecter) GetHomeState(ctx interface{}) *TadoClient_GetHomeState_Call {
	return &TadoClient_GetHomeState_Call{Call: _e.mock.On("GetHomeState", ctx)}
}

func (_c *TadoClient_GetHomeState_Call) Run(run func(ctx context.Context)) *TadoClient_GetHomeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TadoClient_GetHomeState_Call) Return(homeState tado.HomeState, err error) *TadoClient_GetHomeState_Call {
	_c.Call.Return(homeState, err)
	return _c
}

func (_c *TadoClient_GetHomeState_Call) RunAndReturn(run func(context.Context) (tado.HomeState, error)) *TadoClient_GetHomeState_Call {
	_c.Call.Return(run)
	return _c
}

// GetMobileDevices provides a mock function with given fields: _a0
func (_m *TadoClient) GetMobileDevices(_a0 context.Context) ([]tado.MobileDevice, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetMobileDevices")
	}

	var r0 []tado.MobileDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]tado.MobileDevice, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []tado.MobileDevice); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tado.MobileDevice)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_GetMobileDevices_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMobileDevices'
type TadoClient_GetMobileDevices_Call struct {
	*mock.Call
}

// GetMobileDevices is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TadoClient_Expecter) GetMobileDevices(_a0 interface{}) *TadoClient_GetMobileDevices_Call {
	return &TadoClient_GetMobileDevices_Call{Call: _e.mock.On("GetMobileDevices", _a0)}
}

func (_c *TadoClient_GetMobileDevices_Call) Run(run func(_a0 context.Context)) *TadoClient_GetMobileDevices_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TadoClient_GetMobileDevices_Call) Return(_a0 []tado.MobileDevice, _a1 error) *TadoClient_GetMobileDevices_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_GetMobileDevices_Call) RunAndReturn(run func(context.Context) ([]tado.MobileDevice, error)) *TadoClient_GetMobileDevices_Call {
	_c.Call.Return(run)
	return _c
}

// GetWeatherInfo provides a mock function with given fields: _a0
func (_m *TadoClient) GetWeatherInfo(_a0 context.Context) (tado.WeatherInfo, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetWeatherInfo")
	}

	var r0 tado.WeatherInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (tado.WeatherInfo, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) tado.WeatherInfo); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(tado.WeatherInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_GetWeatherInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetWeatherInfo'
type TadoClient_GetWeatherInfo_Call struct {
	*mock.Call
}

// GetWeatherInfo is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TadoClient_Expecter) GetWeatherInfo(_a0 interface{}) *TadoClient_GetWeatherInfo_Call {
	return &TadoClient_GetWeatherInfo_Call{Call: _e.mock.On("GetWeatherInfo", _a0)}
}

func (_c *TadoClient_GetWeatherInfo_Call) Run(run func(_a0 context.Context)) *TadoClient_GetWeatherInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TadoClient_GetWeatherInfo_Call) Return(_a0 tado.WeatherInfo, _a1 error) *TadoClient_GetWeatherInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_GetWeatherInfo_Call) RunAndReturn(run func(context.Context) (tado.WeatherInfo, error)) *TadoClient_GetWeatherInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetZoneInfo provides a mock function with given fields: _a0, _a1
func (_m *TadoClient) GetZoneInfo(_a0 context.Context, _a1 int) (tado.ZoneInfo, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetZoneInfo")
	}

	var r0 tado.ZoneInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (tado.ZoneInfo, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) tado.ZoneInfo); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(tado.ZoneInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_GetZoneInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetZoneInfo'
type TadoClient_GetZoneInfo_Call struct {
	*mock.Call
}

// GetZoneInfo is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *TadoClient_Expecter) GetZoneInfo(_a0 interface{}, _a1 interface{}) *TadoClient_GetZoneInfo_Call {
	return &TadoClient_GetZoneInfo_Call{Call: _e.mock.On("GetZoneInfo", _a0, _a1)}
}

func (_c *TadoClient_GetZoneInfo_Call) Run(run func(_a0 context.Context, _a1 int)) *TadoClient_GetZoneInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TadoClient_GetZoneInfo_Call) Return(_a0 tado.ZoneInfo, _a1 error) *TadoClient_GetZoneInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_GetZoneInfo_Call) RunAndReturn(run func(context.Context, int) (tado.ZoneInfo, error)) *TadoClient_GetZoneInfo_Call {
	_c.Call.Return(run)
	return _c
}

// GetZones provides a mock function with given fields: _a0
func (_m *TadoClient) GetZones(_a0 context.Context) (tado.Zones, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetZones")
	}

	var r0 tado.Zones
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (tado.Zones, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) tado.Zones); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(tado.Zones)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_GetZones_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetZones'
type TadoClient_GetZones_Call struct {
	*mock.Call
}

// GetZones is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *TadoClient_Expecter) GetZones(_a0 interface{}) *TadoClient_GetZones_Call {
	return &TadoClient_GetZones_Call{Call: _e.mock.On("GetZones", _a0)}
}

func (_c *TadoClient_GetZones_Call) Run(run func(_a0 context.Context)) *TadoClient_GetZones_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TadoClient_GetZones_Call) Return(_a0 tado.Zones, _a1 error) *TadoClient_GetZones_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_GetZones_Call) RunAndReturn(run func(context.Context) (tado.Zones, error)) *TadoClient_GetZones_Call {
	_c.Call.Return(run)
	return _c
}

// SetHomeState provides a mock function with given fields: ctx, home
func (_m *TadoClient) SetHomeState(ctx context.Context, home bool) error {
	ret := _m.Called(ctx, home)

	if len(ret) == 0 {
		panic("no return value specified for SetHomeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, home)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoClient_SetHomeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHomeState'
type TadoClient_SetHomeState_Call struct {
	*mock.Call
}

// SetHomeState is a helper method to define mock.On call
//   - ctx context.Context
//   - home bool
func (_e *TadoClient_Expecter) SetHomeState(ctx interface{}, home interface{}) *TadoClient_SetHomeState_Call {
	return &TadoClient_SetHomeState_Call{Call: _e.mock.On("SetHomeState", ctx, home)}
}

func (_c *TadoClient_SetHomeState_Call) Run(run func(ctx context.Context, home bool)) *TadoClient_SetHomeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *TadoClient_SetHomeState_Call) Return(_a0 error) *TadoClient_SetHomeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoClient_SetHomeState_Call) RunAndReturn(run func(context.Context, bool) error) *TadoClient_SetHomeState_Call {
	_c.Call.Return(run)
	return _c
}

// SetZoneOverlay provides a mock function with given fields: _a0, _a1, _a2
func (_m *TadoClient) SetZoneOverlay(_a0 context.Context, _a1 int, _a2 float64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetZoneOverlay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoClient_SetZoneOverlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetZoneOverlay'
type TadoClient_SetZoneOverlay_Call struct {
	*mock.Call
}

// SetZoneOverlay is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 float64
func (_e *TadoClient_Expecter) SetZoneOverlay(_a0 interface{}, _a1 interface{}, _a2 interface{}) *TadoClient_SetZoneOverlay_Call {
	return &TadoClient_SetZoneOverlay_Call{Call: _e.mock.On("SetZoneOverlay", _a0, _a1, _a2)}
}

func (_c *TadoClient_SetZoneOverlay_Call) Run(run func(_a0 context.Context, _a1 int, _a2 float64)) *TadoClient_SetZoneOverlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(float64))
	})
	return _c
}

func (_c *TadoClient_SetZoneOverlay_Call) Return(_a0 error) *TadoClient_SetZoneOverlay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoClient_SetZoneOverlay_Call) RunAndReturn(run func(context.Context, int, float64) error) *TadoClient_SetZoneOverlay_Call {
	_c.Call.Return(run)
	return _c
}

// SetZoneTemporaryOverlay provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *TadoClient) SetZoneTemporaryOverlay(_a0 context.Context, _a1 int, _a2 float64, _a3 time.Duration) error {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for SetZoneTemporaryOverlay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64, time.Duration) error); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoClient_SetZoneTemporaryOverlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetZoneTemporaryOverlay'
type TadoClient_SetZoneTemporaryOverlay_Call struct {
	*mock.Call
}

// SetZoneTemporaryOverlay is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 float64
//   - _a3 time.Duration
func (_e *TadoClient_Expecter) SetZoneTemporaryOverlay(_a0 interface{}, _a1 interface{}, _a2 interface{}, _a3 interface{}) *TadoClient_SetZoneTemporaryOverlay_Call {
	return &TadoClient_SetZoneTemporaryOverlay_Call{Call: _e.mock.On("SetZoneTemporaryOverlay", _a0, _a1, _a2, _a3)}
}

func (_c *TadoClient_SetZoneTemporaryOverlay_Call) Run(run func(_a0 context.Context, _a1 int, _a2 float64, _a3 time.Duration)) *TadoClient_SetZoneTemporaryOverlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(float64), args[3].(time.Duration))
	})
	return _c
}

func (_c *TadoClient_SetZoneTemporaryOverlay_Call) Return(_a0 error) *TadoClient_SetZoneTemporaryOverlay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoClient_SetZoneTemporaryOverlay_Call) RunAndReturn(run func(context.Context, int, float64, time.Duration) error) *TadoClient_SetZoneTemporaryOverlay_Call {
	_c.Call.Return(run)
	return _c
}

// UnsetHomeState provides a mock function with given fields: ctx
func (_m *TadoClient) UnsetHomeState(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UnsetHomeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoClient_UnsetHomeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnsetHomeState'
type TadoClient_UnsetHomeState_Call struct {
	*mock.Call
}

// UnsetHomeState is a helper method to define mock.On call
//   - ctx context.Context
func (_e *TadoClient_Expecter) UnsetHomeState(ctx interface{}) *TadoClient_UnsetHomeState_Call {
	return &TadoClient_UnsetHomeState_Call{Call: _e.mock.On("UnsetHomeState", ctx)}
}

func (_c *TadoClient_UnsetHomeState_Call) Run(run func(ctx context.Context)) *TadoClient_UnsetHomeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *TadoClient_UnsetHomeState_Call) Return(_a0 error) *TadoClient_UnsetHomeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoClient_UnsetHomeState_Call) RunAndReturn(run func(context.Context) error) *TadoClient_UnsetHomeState_Call {
	_c.Call.Return(run)
	return _c
}

// NewTadoClient creates a new instance of TadoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTadoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TadoClient {
	mock := &TadoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
