// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// NewSlackSender creates a new instance of SlackSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSlackSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *SlackSender {
	mock := &SlackSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SlackSender is an autogenerated mock type for the SlackSender type
type SlackSender struct {
	mock.Mock
}

type SlackSender_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackSender) EXPECT() *SlackSender_Expecter {
	return &SlackSender_Expecter{mock: &_m.Mock}
}

// AuthTest provides a mock function for the type SlackSender
func (_mock *SlackSender) AuthTest() (*slack.AuthTestResponse, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuthTest")
	}

	var r0 *slack.AuthTestResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*slack.AuthTestResponse, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *slack.AuthTestResponse); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.AuthTestResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SlackSender_AuthTest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthTest'
type SlackSender_AuthTest_Call struct {
	*mock.Call
}

// AuthTest is a helper method to define mock.On call
func (_e *SlackSender_Expecter) AuthTest() *SlackSender_AuthTest_Call {
	return &SlackSender_AuthTest_Call{Call: _e.mock.On("AuthTest")}
}

func (_c *SlackSender_AuthTest_Call) Run(run func()) *SlackSender_AuthTest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SlackSender_AuthTest_Call) Return(authTestResponse *slack.AuthTestResponse, err error) *SlackSender_AuthTest_Call {
	_c.Call.Return(authTestResponse, err)
	return _c
}

func (_c *SlackSender_AuthTest_Call) RunAndReturn(run func() (*slack.AuthTestResponse, error)) *SlackSender_AuthTest_Call {
	_c.Call.Return(run)
	return _c
}

// GetConversations provides a mock function for the type SlackSender
func (_mock *SlackSender) GetConversations(getConversationsParameters *slack.GetConversationsParameters) ([]slack.Channel, string, error) {
	ret := _mock.Called(getConversationsParameters)

	if len(ret) == 0 {
		panic("no return value specified for GetConversations")
	}

	var r0 []slack.Channel
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*slack.GetConversationsParameters) ([]slack.Channel, string, error)); ok {
		return returnFunc(getConversationsParameters)
	}
	if returnFunc, ok := ret.Get(0).(func(*slack.GetConversationsParameters) []slack.Channel); ok {
		r0 = returnFunc(getConversationsParameters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]slack.Channel)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*slack.GetConversationsParameters) string); ok {
		r1 = returnFunc(getConversationsParameters)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(*slack.GetConversationsParameters) error); ok {
		r2 = returnFunc(getConversationsParameters)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// SlackSender_GetConversations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConversations'
type SlackSender_GetConversations_Call struct {
	*mock.Call
}

// GetConversations is a helper method to define mock.On call
//   - getConversationsParameters *slack.GetConversationsParameters
func (_e *SlackSender_Expecter) GetConversations(getConversationsParameters interface{}) *SlackSender_GetConversations_Call {
	return &SlackSender_GetConversations_Call{Call: _e.mock.On("GetConversations", getConversationsParameters)}
}

func (_c *SlackSender_GetConversations_Call) Run(run func(getConversationsParameters *slack.GetConversationsParameters)) *SlackSender_GetConversations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *slack.GetConversationsParameters
		if args[0] != nil {
			arg0 = args[0].(*slack.GetConversationsParameters)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SlackSender_GetConversations_Call) Return(channels []slack.Channel, s string, err error) *SlackSender_GetConversations_Call {
	_c.Call.Return(channels, s, err)
	return _c
}

func (_c *SlackSender_GetConversations_Call) RunAndReturn(run func(getConversationsParameters *slack.GetConversationsParameters) ([]slack.Channel, string, error)) *SlackSender_GetConversations_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersInConversation provides a mock function for the type SlackSender
func (_mock *SlackSender) GetUsersInConversation(params *slack.GetUsersInConversationParameters) ([]string, string, error) {
	ret := _mock.Called(params)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersInConversation")
	}

	var r0 []string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(*slack.GetUsersInConversationParameters) ([]string, string, error)); ok {
		return returnFunc(params)
	}
	if returnFunc, ok := ret.Get(0).(func(*slack.GetUsersInConversationParameters) []string); ok {
		r0 = returnFunc(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*slack.GetUsersInConversationParameters) string); ok {
		r1 = returnFunc(params)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(*slack.GetUsersInConversationParameters) error); ok {
		r2 = returnFunc(params)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// SlackSender_GetUsersInConversation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersInConversation'
type SlackSender_GetUsersInConversation_Call struct {
	*mock.Call
}

// GetUsersInConversation is a helper method to define mock.On call
//   - params *slack.GetUsersInConversationParameters
func (_e *SlackSender_Expecter) GetUsersInConversation(params interface{}) *SlackSender_GetUsersInConversation_Call {
	return &SlackSender_GetUsersInConversation_Call{Call: _e.mock.On("GetUsersInConversation", params)}
}

func (_c *SlackSender_GetUsersInConversation_Call) Run(run func(params *slack.GetUsersInConversationParameters)) *SlackSender_GetUsersInConversation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *slack.GetUsersInConversationParameters
		if args[0] != nil {
			arg0 = args[0].(*slack.GetUsersInConversationParameters)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SlackSender_GetUsersInConversation_Call) Return(strings []string, s string, err error) *SlackSender_GetUsersInConversation_Call {
	_c.Call.Return(strings, s, err)
	return _c
}

func (_c *SlackSender_GetUsersInConversation_Call) RunAndReturn(run func(params *slack.GetUsersInConversationParameters) ([]string, string, error)) *SlackSender_GetUsersInConversation_Call {
	_c.Call.Return(run)
	return _c
}

// PostMessage provides a mock function for the type SlackSender
func (_mock *SlackSender) PostMessage(s string, msgOptions ...slack.MsgOption) (string, string, error) {
	// slack.MsgOption
	_va := make([]interface{}, len(msgOptions))
	for _i := range msgOptions {
		_va[_i] = msgOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, s)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostMessage")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, ...slack.MsgOption) (string, string, error)); ok {
		return returnFunc(s, msgOptions...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = returnFunc(s, msgOptions...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = returnFunc(s, msgOptions...)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string, ...slack.MsgOption) error); ok {
		r2 = returnFunc(s, msgOptions...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// SlackSender_PostMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostMessage'
type SlackSender_PostMessage_Call struct {
	*mock.Call
}

// PostMessage is a helper method to define mock.On call
//   - s string
//   - msgOptions ...slack.MsgOption
func (_e *SlackSender_Expecter) PostMessage(s interface{}, msgOptions ...interface{}) *SlackSender_PostMessage_Call {
	return &SlackSender_PostMessage_Call{Call: _e.mock.On("PostMessage",
		append([]interface{}{s}, msgOptions...)...)}
}

func (_c *SlackSender_PostMessage_Call) Run(run func(s string, msgOptions ...slack.MsgOption)) *SlackSender_PostMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []slack.MsgOption
		variadicArgs := make([]slack.MsgOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *SlackSender_PostMessage_Call) Return(s1 string, s2 string, err error) *SlackSender_PostMessage_Call {
	_c.Call.Return(s1, s2, err)
	return _c
}

func (_c *SlackSender_PostMessage_Call) RunAndReturn(run func(s string, msgOptions ...slack.MsgOption) (string, string, error)) *SlackSender_PostMessage_Call {
	_c.Call.Return(run)
	return _c
}
