// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	slack "github.com/slack-go/slack"
)

// SlackSender is an autogenerated mock type for the SlackSender type
type SlackSender struct {
	mock.Mock
}

type SlackSender_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackSender) EXPECT() *SlackSender_Expecter {
	return &SlackSender_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: channel, attachments
func (_m *SlackSender) Send(channel string, attachments []slack.Attachment) error {
	ret := _m.Called(channel, attachments)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []slack.Attachment) error); ok {
		r0 = rf(channel, attachments)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SlackSender_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type SlackSender_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - channel string
//   - attachments []slack.Attachment
func (_e *SlackSender_Expecter) Send(channel interface{}, attachments interface{}) *SlackSender_Send_Call {
	return &SlackSender_Send_Call{Call: _e.mock.On("Send", channel, attachments)}
}

func (_c *SlackSender_Send_Call) Run(run func(channel string, attachments []slack.Attachment)) *SlackSender_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]slack.Attachment))
	})
	return _c
}

func (_c *SlackSender_Send_Call) Return(_a0 error) *SlackSender_Send_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SlackSender_Send_Call) RunAndReturn(run func(string, []slack.Attachment) error) *SlackSender_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewSlackSender creates a new instance of SlackSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSlackSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *SlackSender {
	mock := &SlackSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
