// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Controllers is an autogenerated mock type for the Controllers type
type Controllers struct {
	mock.Mock
}

type Controllers_Expecter struct {
	mock *mock.Mock
}

func (_m *Controllers) EXPECT() *Controllers_Expecter {
	return &Controllers_Expecter{mock: &_m.Mock}
}

// ReportTasks provides a mock function with given fields:
func (_m *Controllers) ReportTasks() ([]string, bool) {
	ret := _m.Called()

	var r0 []string
	var r1 bool
	if rf, ok := ret.Get(0).(func() ([]string, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Controllers_ReportTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportTasks'
type Controllers_ReportTasks_Call struct {
	*mock.Call
}

// ReportTasks is a helper method to define mock.On call
func (_e *Controllers_Expecter) ReportTasks() *Controllers_ReportTasks_Call {
	return &Controllers_ReportTasks_Call{Call: _e.mock.On("ReportTasks")}
}

func (_c *Controllers_ReportTasks_Call) Run(run func()) *Controllers_ReportTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Controllers_ReportTasks_Call) Return(_a0 []string, _a1 bool) *Controllers_ReportTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Controllers_ReportTasks_Call) RunAndReturn(run func() ([]string, bool)) *Controllers_ReportTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewControllers creates a new instance of Controllers. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewControllers(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controllers {
	mock := &Controllers{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
