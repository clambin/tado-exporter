// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// TadoSetter is an autogenerated mock type for the TadoSetter type
type TadoSetter struct {
	mock.Mock
}

type TadoSetter_Expecter struct {
	mock *mock.Mock
}

func (_m *TadoSetter) EXPECT() *TadoSetter_Expecter {
	return &TadoSetter_Expecter{mock: &_m.Mock}
}

// DeleteZoneOverlay provides a mock function with given fields: _a0, _a1
func (_m *TadoSetter) DeleteZoneOverlay(_a0 context.Context, _a1 int) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for DeleteZoneOverlay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoSetter_DeleteZoneOverlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteZoneOverlay'
type TadoSetter_DeleteZoneOverlay_Call struct {
	*mock.Call
}

// DeleteZoneOverlay is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
func (_e *TadoSetter_Expecter) DeleteZoneOverlay(_a0 interface{}, _a1 interface{}) *TadoSetter_DeleteZoneOverlay_Call {
	return &TadoSetter_DeleteZoneOverlay_Call{Call: _e.mock.On("DeleteZoneOverlay", _a0, _a1)}
}

func (_c *TadoSetter_DeleteZoneOverlay_Call) Run(run func(_a0 context.Context, _a1 int)) *TadoSetter_DeleteZoneOverlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int))
	})
	return _c
}

func (_c *TadoSetter_DeleteZoneOverlay_Call) Return(_a0 error) *TadoSetter_DeleteZoneOverlay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoSetter_DeleteZoneOverlay_Call) RunAndReturn(run func(context.Context, int) error) *TadoSetter_DeleteZoneOverlay_Call {
	_c.Call.Return(run)
	return _c
}

// SetHomeState provides a mock function with given fields: ctx, home
func (_m *TadoSetter) SetHomeState(ctx context.Context, home bool) error {
	ret := _m.Called(ctx, home)

	if len(ret) == 0 {
		panic("no return value specified for SetHomeState")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, home)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoSetter_SetHomeState_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetHomeState'
type TadoSetter_SetHomeState_Call struct {
	*mock.Call
}

// SetHomeState is a helper method to define mock.On call
//   - ctx context.Context
//   - home bool
func (_e *TadoSetter_Expecter) SetHomeState(ctx interface{}, home interface{}) *TadoSetter_SetHomeState_Call {
	return &TadoSetter_SetHomeState_Call{Call: _e.mock.On("SetHomeState", ctx, home)}
}

func (_c *TadoSetter_SetHomeState_Call) Run(run func(ctx context.Context, home bool)) *TadoSetter_SetHomeState_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *TadoSetter_SetHomeState_Call) Return(_a0 error) *TadoSetter_SetHomeState_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoSetter_SetHomeState_Call) RunAndReturn(run func(context.Context, bool) error) *TadoSetter_SetHomeState_Call {
	_c.Call.Return(run)
	return _c
}

// SetZoneOverlay provides a mock function with given fields: _a0, _a1, _a2
func (_m *TadoSetter) SetZoneOverlay(_a0 context.Context, _a1 int, _a2 float64) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SetZoneOverlay")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, float64) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TadoSetter_SetZoneOverlay_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetZoneOverlay'
type TadoSetter_SetZoneOverlay_Call struct {
	*mock.Call
}

// SetZoneOverlay is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 int
//   - _a2 float64
func (_e *TadoSetter_Expecter) SetZoneOverlay(_a0 interface{}, _a1 interface{}, _a2 interface{}) *TadoSetter_SetZoneOverlay_Call {
	return &TadoSetter_SetZoneOverlay_Call{Call: _e.mock.On("SetZoneOverlay", _a0, _a1, _a2)}
}

func (_c *TadoSetter_SetZoneOverlay_Call) Run(run func(_a0 context.Context, _a1 int, _a2 float64)) *TadoSetter_SetZoneOverlay_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(float64))
	})
	return _c
}

func (_c *TadoSetter_SetZoneOverlay_Call) Return(_a0 error) *TadoSetter_SetZoneOverlay_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TadoSetter_SetZoneOverlay_Call) RunAndReturn(run func(context.Context, int, float64) error) *TadoSetter_SetZoneOverlay_Call {
	_c.Call.Return(run)
	return _c
}

// NewTadoSetter creates a new instance of TadoSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTadoSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *TadoSetter {
	mock := &TadoSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
