// Code generated by mockery v2.49.0. DO NOT EDIT.

package mocks

import (
	context "context"

	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"

	socketmode "github.com/slack-go/slack/socketmode"
)

// SocketModeHandler is an autogenerated mock type for the SocketModeHandler type
type SocketModeHandler struct {
	mock.Mock
}

type SocketModeHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *SocketModeHandler) EXPECT() *SocketModeHandler_Expecter {
	return &SocketModeHandler_Expecter{mock: &_m.Mock}
}

// HandleDefault provides a mock function with given fields: f
func (_m *SocketModeHandler) HandleDefault(f socketmode.SocketmodeHandlerFunc) {
	_m.Called(f)
}

// SocketModeHandler_HandleDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleDefault'
type SocketModeHandler_HandleDefault_Call struct {
	*mock.Call
}

// HandleDefault is a helper method to define mock.On call
//   - f socketmode.SocketmodeHandlerFunc
func (_e *SocketModeHandler_Expecter) HandleDefault(f interface{}) *SocketModeHandler_HandleDefault_Call {
	return &SocketModeHandler_HandleDefault_Call{Call: _e.mock.On("HandleDefault", f)}
}

func (_c *SocketModeHandler_HandleDefault_Call) Run(run func(f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(socketmode.SocketmodeHandlerFunc))
	})
	return _c
}

func (_c *SocketModeHandler_HandleDefault_Call) Return() *SocketModeHandler_HandleDefault_Call {
	_c.Call.Return()
	return _c
}

func (_c *SocketModeHandler_HandleDefault_Call) RunAndReturn(run func(socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleDefault_Call {
	_c.Call.Return(run)
	return _c
}

// HandleInteraction provides a mock function with given fields: et, f
func (_m *SocketModeHandler) HandleInteraction(et slack.InteractionType, f socketmode.SocketmodeHandlerFunc) {
	_m.Called(et, f)
}

// SocketModeHandler_HandleInteraction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleInteraction'
type SocketModeHandler_HandleInteraction_Call struct {
	*mock.Call
}

// HandleInteraction is a helper method to define mock.On call
//   - et slack.InteractionType
//   - f socketmode.SocketmodeHandlerFunc
func (_e *SocketModeHandler_Expecter) HandleInteraction(et interface{}, f interface{}) *SocketModeHandler_HandleInteraction_Call {
	return &SocketModeHandler_HandleInteraction_Call{Call: _e.mock.On("HandleInteraction", et, f)}
}

func (_c *SocketModeHandler_HandleInteraction_Call) Run(run func(et slack.InteractionType, f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleInteraction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(slack.InteractionType), args[1].(socketmode.SocketmodeHandlerFunc))
	})
	return _c
}

func (_c *SocketModeHandler_HandleInteraction_Call) Return() *SocketModeHandler_HandleInteraction_Call {
	_c.Call.Return()
	return _c
}

func (_c *SocketModeHandler_HandleInteraction_Call) RunAndReturn(run func(slack.InteractionType, socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleInteraction_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSlashCommand provides a mock function with given fields: command, f
func (_m *SocketModeHandler) HandleSlashCommand(command string, f socketmode.SocketmodeHandlerFunc) {
	_m.Called(command, f)
}

// SocketModeHandler_HandleSlashCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSlashCommand'
type SocketModeHandler_HandleSlashCommand_Call struct {
	*mock.Call
}

// HandleSlashCommand is a helper method to define mock.On call
//   - command string
//   - f socketmode.SocketmodeHandlerFunc
func (_e *SocketModeHandler_Expecter) HandleSlashCommand(command interface{}, f interface{}) *SocketModeHandler_HandleSlashCommand_Call {
	return &SocketModeHandler_HandleSlashCommand_Call{Call: _e.mock.On("HandleSlashCommand", command, f)}
}

func (_c *SocketModeHandler_HandleSlashCommand_Call) Run(run func(command string, f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleSlashCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(socketmode.SocketmodeHandlerFunc))
	})
	return _c
}

func (_c *SocketModeHandler_HandleSlashCommand_Call) Return() *SocketModeHandler_HandleSlashCommand_Call {
	_c.Call.Return()
	return _c
}

func (_c *SocketModeHandler_HandleSlashCommand_Call) RunAndReturn(run func(string, socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleSlashCommand_Call {
	_c.Call.Return(run)
	return _c
}

// RunEventLoopContext provides a mock function with given fields: ctx
func (_m *SocketModeHandler) RunEventLoopContext(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RunEventLoopContext")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SocketModeHandler_RunEventLoopContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunEventLoopContext'
type SocketModeHandler_RunEventLoopContext_Call struct {
	*mock.Call
}

// RunEventLoopContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SocketModeHandler_Expecter) RunEventLoopContext(ctx interface{}) *SocketModeHandler_RunEventLoopContext_Call {
	return &SocketModeHandler_RunEventLoopContext_Call{Call: _e.mock.On("RunEventLoopContext", ctx)}
}

func (_c *SocketModeHandler_RunEventLoopContext_Call) Run(run func(ctx context.Context)) *SocketModeHandler_RunEventLoopContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *SocketModeHandler_RunEventLoopContext_Call) Return(_a0 error) *SocketModeHandler_RunEventLoopContext_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SocketModeHandler_RunEventLoopContext_Call) RunAndReturn(run func(context.Context) error) *SocketModeHandler_RunEventLoopContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewSocketModeHandler creates a new instance of SocketModeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSocketModeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *SocketModeHandler {
	mock := &SocketModeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
