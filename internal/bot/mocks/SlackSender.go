// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	slack "github.com/slack-go/slack"
	mock "github.com/stretchr/testify/mock"
)

// SlackSender is an autogenerated mock type for the SlackSender type
type SlackSender struct {
	mock.Mock
}

type SlackSender_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackSender) EXPECT() *SlackSender_Expecter {
	return &SlackSender_Expecter{mock: &_m.Mock}
}

// OpenView provides a mock function with given fields: triggerID, view
func (_m *SlackSender) OpenView(triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error) {
	ret := _m.Called(triggerID, view)

	if len(ret) == 0 {
		panic("no return value specified for OpenView")
	}

	var r0 *slack.ViewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, slack.ModalViewRequest) (*slack.ViewResponse, error)); ok {
		return rf(triggerID, view)
	}
	if rf, ok := ret.Get(0).(func(string, slack.ModalViewRequest) *slack.ViewResponse); ok {
		r0 = rf(triggerID, view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.ViewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, slack.ModalViewRequest) error); ok {
		r1 = rf(triggerID, view)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackSender_OpenView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenView'
type SlackSender_OpenView_Call struct {
	*mock.Call
}

// OpenView is a helper method to define mock.On call
//   - triggerID string
//   - view slack.ModalViewRequest
func (_e *SlackSender_Expecter) OpenView(triggerID interface{}, view interface{}) *SlackSender_OpenView_Call {
	return &SlackSender_OpenView_Call{Call: _e.mock.On("OpenView", triggerID, view)}
}

func (_c *SlackSender_OpenView_Call) Run(run func(triggerID string, view slack.ModalViewRequest)) *SlackSender_OpenView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(slack.ModalViewRequest))
	})
	return _c
}

func (_c *SlackSender_OpenView_Call) Return(_a0 *slack.ViewResponse, _a1 error) *SlackSender_OpenView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SlackSender_OpenView_Call) RunAndReturn(run func(string, slack.ModalViewRequest) (*slack.ViewResponse, error)) *SlackSender_OpenView_Call {
	_c.Call.Return(run)
	return _c
}

// PostEphemeral provides a mock function with given fields: channelID, userID, options
func (_m *SlackSender) PostEphemeral(channelID string, userID string, options ...slack.MsgOption) (string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, userID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostEphemeral")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, ...slack.MsgOption) (string, error)); ok {
		return rf(channelID, userID, options...)
	}
	if rf, ok := ret.Get(0).(func(string, string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, userID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, string, ...slack.MsgOption) error); ok {
		r1 = rf(channelID, userID, options...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackSender_PostEphemeral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostEphemeral'
type SlackSender_PostEphemeral_Call struct {
	*mock.Call
}

// PostEphemeral is a helper method to define mock.On call
//   - channelID string
//   - userID string
//   - options ...slack.MsgOption
func (_e *SlackSender_Expecter) PostEphemeral(channelID interface{}, userID interface{}, options ...interface{}) *SlackSender_PostEphemeral_Call {
	return &SlackSender_PostEphemeral_Call{Call: _e.mock.On("PostEphemeral",
		append([]interface{}{channelID, userID}, options...)...)}
}

func (_c *SlackSender_PostEphemeral_Call) Run(run func(channelID string, userID string, options ...slack.MsgOption)) *SlackSender_PostEphemeral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.MsgOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		run(args[0].(string), args[1].(string), variadicArgs...)
	})
	return _c
}

func (_c *SlackSender_PostEphemeral_Call) Return(_a0 string, _a1 error) *SlackSender_PostEphemeral_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SlackSender_PostEphemeral_Call) RunAndReturn(run func(string, string, ...slack.MsgOption) (string, error)) *SlackSender_PostEphemeral_Call {
	_c.Call.Return(run)
	return _c
}

// PostMessage provides a mock function with given fields: channelID, options
func (_m *SlackSender) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostMessage")
	}

	var r0 string
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) (string, string, error)); ok {
		return rf(channelID, options...)
	}
	if rf, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = rf(channelID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = rf(channelID, options...)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(string, ...slack.MsgOption) error); ok {
		r2 = rf(channelID, options...)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SlackSender_PostMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostMessage'
type SlackSender_PostMessage_Call struct {
	*mock.Call
}

// PostMessage is a helper method to define mock.On call
//   - channelID string
//   - options ...slack.MsgOption
func (_e *SlackSender_Expecter) PostMessage(channelID interface{}, options ...interface{}) *SlackSender_PostMessage_Call {
	return &SlackSender_PostMessage_Call{Call: _e.mock.On("PostMessage",
		append([]interface{}{channelID}, options...)...)}
}

func (_c *SlackSender_PostMessage_Call) Run(run func(channelID string, options ...slack.MsgOption)) *SlackSender_PostMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]slack.MsgOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		run(args[0].(string), variadicArgs...)
	})
	return _c
}

func (_c *SlackSender_PostMessage_Call) Return(_a0 string, _a1 string, _a2 error) *SlackSender_PostMessage_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *SlackSender_PostMessage_Call) RunAndReturn(run func(string, ...slack.MsgOption) (string, string, error)) *SlackSender_PostMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateView provides a mock function with given fields: view, externalID, hash, viewID
func (_m *SlackSender) UpdateView(view slack.ModalViewRequest, externalID string, hash string, viewID string) (*slack.ViewResponse, error) {
	ret := _m.Called(view, externalID, hash, viewID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateView")
	}

	var r0 *slack.ViewResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(slack.ModalViewRequest, string, string, string) (*slack.ViewResponse, error)); ok {
		return rf(view, externalID, hash, viewID)
	}
	if rf, ok := ret.Get(0).(func(slack.ModalViewRequest, string, string, string) *slack.ViewResponse); ok {
		r0 = rf(view, externalID, hash, viewID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.ViewResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(slack.ModalViewRequest, string, string, string) error); ok {
		r1 = rf(view, externalID, hash, viewID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SlackSender_UpdateView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateView'
type SlackSender_UpdateView_Call struct {
	*mock.Call
}

// UpdateView is a helper method to define mock.On call
//   - view slack.ModalViewRequest
//   - externalID string
//   - hash string
//   - viewID string
func (_e *SlackSender_Expecter) UpdateView(view interface{}, externalID interface{}, hash interface{}, viewID interface{}) *SlackSender_UpdateView_Call {
	return &SlackSender_UpdateView_Call{Call: _e.mock.On("UpdateView", view, externalID, hash, viewID)}
}

func (_c *SlackSender_UpdateView_Call) Run(run func(view slack.ModalViewRequest, externalID string, hash string, viewID string)) *SlackSender_UpdateView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(slack.ModalViewRequest), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *SlackSender_UpdateView_Call) Return(_a0 *slack.ViewResponse, _a1 error) *SlackSender_UpdateView_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *SlackSender_UpdateView_Call) RunAndReturn(run func(slack.ModalViewRequest, string, string, string) (*slack.ViewResponse, error)) *SlackSender_UpdateView_Call {
	_c.Call.Return(run)
	return _c
}

// NewSlackSender creates a new instance of SlackSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSlackSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *SlackSender {
	mock := &SlackSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
