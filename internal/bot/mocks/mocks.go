// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/clambin/tado-exporter/internal/poller"
	"github.com/clambin/tado/v2"
	"github.com/slack-go/slack"
	"github.com/slack-go/slack/socketmode"
	mock "github.com/stretchr/testify/mock"
)

// NewTadoClient creates a new instance of TadoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTadoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TadoClient {
	mock := &TadoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// TadoClient is an autogenerated mock type for the TadoClient type
type TadoClient struct {
	mock.Mock
}

type TadoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TadoClient) EXPECT() *TadoClient_Expecter {
	return &TadoClient_Expecter{mock: &_m.Mock}
}

// DeletePresenceLockWithResponse provides a mock function for the type TadoClient
func (_mock *TadoClient) DeletePresenceLockWithResponse(ctx context.Context, homeId tado.HomeId, reqEditors ...tado.RequestEditorFn) (*tado.DeletePresenceLockResponse, error) {
	// tado.RequestEditorFn
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePresenceLockWithResponse")
	}

	var r0 *tado.DeletePresenceLockResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, ...tado.RequestEditorFn) (*tado.DeletePresenceLockResponse, error)); ok {
		return returnFunc(ctx, homeId, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, ...tado.RequestEditorFn) *tado.DeletePresenceLockResponse); ok {
		r0 = returnFunc(ctx, homeId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.DeletePresenceLockResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, tado.HomeId, ...tado.RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, homeId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TadoClient_DeletePresenceLockWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePresenceLockWithResponse'
type TadoClient_DeletePresenceLockWithResponse_Call struct {
	*mock.Call
}

// DeletePresenceLockWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) DeletePresenceLockWithResponse(ctx interface{}, homeId interface{}, reqEditors ...interface{}) *TadoClient_DeletePresenceLockWithResponse_Call {
	return &TadoClient_DeletePresenceLockWithResponse_Call{Call: _e.mock.On("DeletePresenceLockWithResponse",
		append([]interface{}{ctx, homeId}, reqEditors...)...)}
}

func (_c *TadoClient_DeletePresenceLockWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, reqEditors ...tado.RequestEditorFn)) *TadoClient_DeletePresenceLockWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 tado.HomeId
		if args[1] != nil {
			arg1 = args[1].(tado.HomeId)
		}
		var arg2 []tado.RequestEditorFn
		variadicArgs := make([]tado.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *TadoClient_DeletePresenceLockWithResponse_Call) Return(deletePresenceLockResponse *tado.DeletePresenceLockResponse, err error) *TadoClient_DeletePresenceLockWithResponse_Call {
	_c.Call.Return(deletePresenceLockResponse, err)
	return _c
}

func (_c *TadoClient_DeletePresenceLockWithResponse_Call) RunAndReturn(run func(ctx context.Context, homeId tado.HomeId, reqEditors ...tado.RequestEditorFn) (*tado.DeletePresenceLockResponse, error)) *TadoClient_DeletePresenceLockWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteZoneOverlayWithResponse provides a mock function for the type TadoClient
func (_mock *TadoClient) DeleteZoneOverlayWithResponse(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, reqEditors ...tado.RequestEditorFn) (*tado.DeleteZoneOverlayResponse, error) {
	// tado.RequestEditorFn
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId, zoneId)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteZoneOverlayWithResponse")
	}

	var r0 *tado.DeleteZoneOverlayResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, ...tado.RequestEditorFn) (*tado.DeleteZoneOverlayResponse, error)); ok {
		return returnFunc(ctx, homeId, zoneId, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, ...tado.RequestEditorFn) *tado.DeleteZoneOverlayResponse); ok {
		r0 = returnFunc(ctx, homeId, zoneId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.DeleteZoneOverlayResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, tado.HomeId, tado.ZoneId, ...tado.RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, homeId, zoneId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TadoClient_DeleteZoneOverlayWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteZoneOverlayWithResponse'
type TadoClient_DeleteZoneOverlayWithResponse_Call struct {
	*mock.Call
}

// DeleteZoneOverlayWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - zoneId tado.ZoneId
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) DeleteZoneOverlayWithResponse(ctx interface{}, homeId interface{}, zoneId interface{}, reqEditors ...interface{}) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	return &TadoClient_DeleteZoneOverlayWithResponse_Call{Call: _e.mock.On("DeleteZoneOverlayWithResponse",
		append([]interface{}{ctx, homeId, zoneId}, reqEditors...)...)}
}

func (_c *TadoClient_DeleteZoneOverlayWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, reqEditors ...tado.RequestEditorFn)) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 tado.HomeId
		if args[1] != nil {
			arg1 = args[1].(tado.HomeId)
		}
		var arg2 tado.ZoneId
		if args[2] != nil {
			arg2 = args[2].(tado.ZoneId)
		}
		var arg3 []tado.RequestEditorFn
		variadicArgs := make([]tado.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *TadoClient_DeleteZoneOverlayWithResponse_Call) Return(deleteZoneOverlayResponse *tado.DeleteZoneOverlayResponse, err error) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	_c.Call.Return(deleteZoneOverlayResponse, err)
	return _c
}

func (_c *TadoClient_DeleteZoneOverlayWithResponse_Call) RunAndReturn(run func(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, reqEditors ...tado.RequestEditorFn) (*tado.DeleteZoneOverlayResponse, error)) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetPresenceLockWithResponse provides a mock function for the type TadoClient
func (_mock *TadoClient) SetPresenceLockWithResponse(ctx context.Context, homeId tado.HomeId, body tado.SetPresenceLockJSONRequestBody, reqEditors ...tado.RequestEditorFn) (*tado.SetPresenceLockResponse, error) {
	// tado.RequestEditorFn
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId, body)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetPresenceLockWithResponse")
	}

	var r0 *tado.SetPresenceLockResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.SetPresenceLockJSONRequestBody, ...tado.RequestEditorFn) (*tado.SetPresenceLockResponse, error)); ok {
		return returnFunc(ctx, homeId, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.SetPresenceLockJSONRequestBody, ...tado.RequestEditorFn) *tado.SetPresenceLockResponse); ok {
		r0 = returnFunc(ctx, homeId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.SetPresenceLockResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, tado.HomeId, tado.SetPresenceLockJSONRequestBody, ...tado.RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, homeId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TadoClient_SetPresenceLockWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPresenceLockWithResponse'
type TadoClient_SetPresenceLockWithResponse_Call struct {
	*mock.Call
}

// SetPresenceLockWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - body tado.SetPresenceLockJSONRequestBody
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) SetPresenceLockWithResponse(ctx interface{}, homeId interface{}, body interface{}, reqEditors ...interface{}) *TadoClient_SetPresenceLockWithResponse_Call {
	return &TadoClient_SetPresenceLockWithResponse_Call{Call: _e.mock.On("SetPresenceLockWithResponse",
		append([]interface{}{ctx, homeId, body}, reqEditors...)...)}
}

func (_c *TadoClient_SetPresenceLockWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, body tado.SetPresenceLockJSONRequestBody, reqEditors ...tado.RequestEditorFn)) *TadoClient_SetPresenceLockWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 tado.HomeId
		if args[1] != nil {
			arg1 = args[1].(tado.HomeId)
		}
		var arg2 tado.SetPresenceLockJSONRequestBody
		if args[2] != nil {
			arg2 = args[2].(tado.SetPresenceLockJSONRequestBody)
		}
		var arg3 []tado.RequestEditorFn
		variadicArgs := make([]tado.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		arg3 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3...,
		)
	})
	return _c
}

func (_c *TadoClient_SetPresenceLockWithResponse_Call) Return(setPresenceLockResponse *tado.SetPresenceLockResponse, err error) *TadoClient_SetPresenceLockWithResponse_Call {
	_c.Call.Return(setPresenceLockResponse, err)
	return _c
}

func (_c *TadoClient_SetPresenceLockWithResponse_Call) RunAndReturn(run func(ctx context.Context, homeId tado.HomeId, body tado.SetPresenceLockJSONRequestBody, reqEditors ...tado.RequestEditorFn) (*tado.SetPresenceLockResponse, error)) *TadoClient_SetPresenceLockWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetZoneOverlayWithResponse provides a mock function for the type TadoClient
func (_mock *TadoClient) SetZoneOverlayWithResponse(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, body tado.SetZoneOverlayJSONRequestBody, reqEditors ...tado.RequestEditorFn) (*tado.SetZoneOverlayResponse, error) {
	// tado.RequestEditorFn
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId, zoneId, body)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetZoneOverlayWithResponse")
	}

	var r0 *tado.SetZoneOverlayResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, tado.SetZoneOverlayJSONRequestBody, ...tado.RequestEditorFn) (*tado.SetZoneOverlayResponse, error)); ok {
		return returnFunc(ctx, homeId, zoneId, body, reqEditors...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, tado.SetZoneOverlayJSONRequestBody, ...tado.RequestEditorFn) *tado.SetZoneOverlayResponse); ok {
		r0 = returnFunc(ctx, homeId, zoneId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.SetZoneOverlayResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, tado.HomeId, tado.ZoneId, tado.SetZoneOverlayJSONRequestBody, ...tado.RequestEditorFn) error); ok {
		r1 = returnFunc(ctx, homeId, zoneId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// TadoClient_SetZoneOverlayWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetZoneOverlayWithResponse'
type TadoClient_SetZoneOverlayWithResponse_Call struct {
	*mock.Call
}

// SetZoneOverlayWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - zoneId tado.ZoneId
//   - body tado.SetZoneOverlayJSONRequestBody
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) SetZoneOverlayWithResponse(ctx interface{}, homeId interface{}, zoneId interface{}, body interface{}, reqEditors ...interface{}) *TadoClient_SetZoneOverlayWithResponse_Call {
	return &TadoClient_SetZoneOverlayWithResponse_Call{Call: _e.mock.On("SetZoneOverlayWithResponse",
		append([]interface{}{ctx, homeId, zoneId, body}, reqEditors...)...)}
}

func (_c *TadoClient_SetZoneOverlayWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, body tado.SetZoneOverlayJSONRequestBody, reqEditors ...tado.RequestEditorFn)) *TadoClient_SetZoneOverlayWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 tado.HomeId
		if args[1] != nil {
			arg1 = args[1].(tado.HomeId)
		}
		var arg2 tado.ZoneId
		if args[2] != nil {
			arg2 = args[2].(tado.ZoneId)
		}
		var arg3 tado.SetZoneOverlayJSONRequestBody
		if args[3] != nil {
			arg3 = args[3].(tado.SetZoneOverlayJSONRequestBody)
		}
		var arg4 []tado.RequestEditorFn
		variadicArgs := make([]tado.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		arg4 = variadicArgs
		run(
			arg0,
			arg1,
			arg2,
			arg3,
			arg4...,
		)
	})
	return _c
}

func (_c *TadoClient_SetZoneOverlayWithResponse_Call) Return(setZoneOverlayResponse *tado.SetZoneOverlayResponse, err error) *TadoClient_SetZoneOverlayWithResponse_Call {
	_c.Call.Return(setZoneOverlayResponse, err)
	return _c
}

func (_c *TadoClient_SetZoneOverlayWithResponse_Call) RunAndReturn(run func(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, body tado.SetZoneOverlayJSONRequestBody, reqEditors ...tado.RequestEditorFn) (*tado.SetZoneOverlayResponse, error)) *TadoClient_SetZoneOverlayWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewSocketModeHandler creates a new instance of SocketModeHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSocketModeHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *SocketModeHandler {
	mock := &SocketModeHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SocketModeHandler is an autogenerated mock type for the SocketModeHandler type
type SocketModeHandler struct {
	mock.Mock
}

type SocketModeHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *SocketModeHandler) EXPECT() *SocketModeHandler_Expecter {
	return &SocketModeHandler_Expecter{mock: &_m.Mock}
}

// HandleDefault provides a mock function for the type SocketModeHandler
func (_mock *SocketModeHandler) HandleDefault(f socketmode.SocketmodeHandlerFunc) {
	_mock.Called(f)
	return
}

// SocketModeHandler_HandleDefault_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleDefault'
type SocketModeHandler_HandleDefault_Call struct {
	*mock.Call
}

// HandleDefault is a helper method to define mock.On call
//   - f socketmode.SocketmodeHandlerFunc
func (_e *SocketModeHandler_Expecter) HandleDefault(f interface{}) *SocketModeHandler_HandleDefault_Call {
	return &SocketModeHandler_HandleDefault_Call{Call: _e.mock.On("HandleDefault", f)}
}

func (_c *SocketModeHandler_HandleDefault_Call) Run(run func(f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleDefault_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 socketmode.SocketmodeHandlerFunc
		if args[0] != nil {
			arg0 = args[0].(socketmode.SocketmodeHandlerFunc)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SocketModeHandler_HandleDefault_Call) Return() *SocketModeHandler_HandleDefault_Call {
	_c.Call.Return()
	return _c
}

func (_c *SocketModeHandler_HandleDefault_Call) RunAndReturn(run func(f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleDefault_Call {
	_c.Run(run)
	return _c
}

// HandleInteraction provides a mock function for the type SocketModeHandler
func (_mock *SocketModeHandler) HandleInteraction(et slack.InteractionType, f socketmode.SocketmodeHandlerFunc) {
	_mock.Called(et, f)
	return
}

// SocketModeHandler_HandleInteraction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleInteraction'
type SocketModeHandler_HandleInteraction_Call struct {
	*mock.Call
}

// HandleInteraction is a helper method to define mock.On call
//   - et slack.InteractionType
//   - f socketmode.SocketmodeHandlerFunc
func (_e *SocketModeHandler_Expecter) HandleInteraction(et interface{}, f interface{}) *SocketModeHandler_HandleInteraction_Call {
	return &SocketModeHandler_HandleInteraction_Call{Call: _e.mock.On("HandleInteraction", et, f)}
}

func (_c *SocketModeHandler_HandleInteraction_Call) Run(run func(et slack.InteractionType, f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleInteraction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 slack.InteractionType
		if args[0] != nil {
			arg0 = args[0].(slack.InteractionType)
		}
		var arg1 socketmode.SocketmodeHandlerFunc
		if args[1] != nil {
			arg1 = args[1].(socketmode.SocketmodeHandlerFunc)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SocketModeHandler_HandleInteraction_Call) Return() *SocketModeHandler_HandleInteraction_Call {
	_c.Call.Return()
	return _c
}

func (_c *SocketModeHandler_HandleInteraction_Call) RunAndReturn(run func(et slack.InteractionType, f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleInteraction_Call {
	_c.Run(run)
	return _c
}

// HandleSlashCommand provides a mock function for the type SocketModeHandler
func (_mock *SocketModeHandler) HandleSlashCommand(command string, f socketmode.SocketmodeHandlerFunc) {
	_mock.Called(command, f)
	return
}

// SocketModeHandler_HandleSlashCommand_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSlashCommand'
type SocketModeHandler_HandleSlashCommand_Call struct {
	*mock.Call
}

// HandleSlashCommand is a helper method to define mock.On call
//   - command string
//   - f socketmode.SocketmodeHandlerFunc
func (_e *SocketModeHandler_Expecter) HandleSlashCommand(command interface{}, f interface{}) *SocketModeHandler_HandleSlashCommand_Call {
	return &SocketModeHandler_HandleSlashCommand_Call{Call: _e.mock.On("HandleSlashCommand", command, f)}
}

func (_c *SocketModeHandler_HandleSlashCommand_Call) Run(run func(command string, f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleSlashCommand_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 socketmode.SocketmodeHandlerFunc
		if args[1] != nil {
			arg1 = args[1].(socketmode.SocketmodeHandlerFunc)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SocketModeHandler_HandleSlashCommand_Call) Return() *SocketModeHandler_HandleSlashCommand_Call {
	_c.Call.Return()
	return _c
}

func (_c *SocketModeHandler_HandleSlashCommand_Call) RunAndReturn(run func(command string, f socketmode.SocketmodeHandlerFunc)) *SocketModeHandler_HandleSlashCommand_Call {
	_c.Run(run)
	return _c
}

// RunEventLoopContext provides a mock function for the type SocketModeHandler
func (_mock *SocketModeHandler) RunEventLoopContext(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for RunEventLoopContext")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// SocketModeHandler_RunEventLoopContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RunEventLoopContext'
type SocketModeHandler_RunEventLoopContext_Call struct {
	*mock.Call
}

// RunEventLoopContext is a helper method to define mock.On call
//   - ctx context.Context
func (_e *SocketModeHandler_Expecter) RunEventLoopContext(ctx interface{}) *SocketModeHandler_RunEventLoopContext_Call {
	return &SocketModeHandler_RunEventLoopContext_Call{Call: _e.mock.On("RunEventLoopContext", ctx)}
}

func (_c *SocketModeHandler_RunEventLoopContext_Call) Run(run func(ctx context.Context)) *SocketModeHandler_RunEventLoopContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *SocketModeHandler_RunEventLoopContext_Call) Return(err error) *SocketModeHandler_RunEventLoopContext_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *SocketModeHandler_RunEventLoopContext_Call) RunAndReturn(run func(ctx context.Context) error) *SocketModeHandler_RunEventLoopContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewSlackSender creates a new instance of SlackSender. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSlackSender(t interface {
	mock.TestingT
	Cleanup(func())
}) *SlackSender {
	mock := &SlackSender{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// SlackSender is an autogenerated mock type for the SlackSender type
type SlackSender struct {
	mock.Mock
}

type SlackSender_Expecter struct {
	mock *mock.Mock
}

func (_m *SlackSender) EXPECT() *SlackSender_Expecter {
	return &SlackSender_Expecter{mock: &_m.Mock}
}

// OpenView provides a mock function for the type SlackSender
func (_mock *SlackSender) OpenView(triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error) {
	ret := _mock.Called(triggerID, view)

	if len(ret) == 0 {
		panic("no return value specified for OpenView")
	}

	var r0 *slack.ViewResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, slack.ModalViewRequest) (*slack.ViewResponse, error)); ok {
		return returnFunc(triggerID, view)
	}
	if returnFunc, ok := ret.Get(0).(func(string, slack.ModalViewRequest) *slack.ViewResponse); ok {
		r0 = returnFunc(triggerID, view)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.ViewResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, slack.ModalViewRequest) error); ok {
		r1 = returnFunc(triggerID, view)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SlackSender_OpenView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OpenView'
type SlackSender_OpenView_Call struct {
	*mock.Call
}

// OpenView is a helper method to define mock.On call
//   - triggerID string
//   - view slack.ModalViewRequest
func (_e *SlackSender_Expecter) OpenView(triggerID interface{}, view interface{}) *SlackSender_OpenView_Call {
	return &SlackSender_OpenView_Call{Call: _e.mock.On("OpenView", triggerID, view)}
}

func (_c *SlackSender_OpenView_Call) Run(run func(triggerID string, view slack.ModalViewRequest)) *SlackSender_OpenView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 slack.ModalViewRequest
		if args[1] != nil {
			arg1 = args[1].(slack.ModalViewRequest)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *SlackSender_OpenView_Call) Return(viewResponse *slack.ViewResponse, err error) *SlackSender_OpenView_Call {
	_c.Call.Return(viewResponse, err)
	return _c
}

func (_c *SlackSender_OpenView_Call) RunAndReturn(run func(triggerID string, view slack.ModalViewRequest) (*slack.ViewResponse, error)) *SlackSender_OpenView_Call {
	_c.Call.Return(run)
	return _c
}

// PostEphemeral provides a mock function for the type SlackSender
func (_mock *SlackSender) PostEphemeral(channelID string, userID string, options ...slack.MsgOption) (string, error) {
	// slack.MsgOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID, userID)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostEphemeral")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, string, ...slack.MsgOption) (string, error)); ok {
		return returnFunc(channelID, userID, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, string, ...slack.MsgOption) string); ok {
		r0 = returnFunc(channelID, userID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, string, ...slack.MsgOption) error); ok {
		r1 = returnFunc(channelID, userID, options...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SlackSender_PostEphemeral_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostEphemeral'
type SlackSender_PostEphemeral_Call struct {
	*mock.Call
}

// PostEphemeral is a helper method to define mock.On call
//   - channelID string
//   - userID string
//   - options ...slack.MsgOption
func (_e *SlackSender_Expecter) PostEphemeral(channelID interface{}, userID interface{}, options ...interface{}) *SlackSender_PostEphemeral_Call {
	return &SlackSender_PostEphemeral_Call{Call: _e.mock.On("PostEphemeral",
		append([]interface{}{channelID, userID}, options...)...)}
}

func (_c *SlackSender_PostEphemeral_Call) Run(run func(channelID string, userID string, options ...slack.MsgOption)) *SlackSender_PostEphemeral_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 []slack.MsgOption
		variadicArgs := make([]slack.MsgOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *SlackSender_PostEphemeral_Call) Return(s string, err error) *SlackSender_PostEphemeral_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *SlackSender_PostEphemeral_Call) RunAndReturn(run func(channelID string, userID string, options ...slack.MsgOption) (string, error)) *SlackSender_PostEphemeral_Call {
	_c.Call.Return(run)
	return _c
}

// PostMessage provides a mock function for the type SlackSender
func (_mock *SlackSender) PostMessage(channelID string, options ...slack.MsgOption) (string, string, error) {
	// slack.MsgOption
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, channelID)
	_ca = append(_ca, _va...)
	ret := _mock.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostMessage")
	}

	var r0 string
	var r1 string
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(string, ...slack.MsgOption) (string, string, error)); ok {
		return returnFunc(channelID, options...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...slack.MsgOption) string); ok {
		r0 = returnFunc(channelID, options...)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...slack.MsgOption) string); ok {
		r1 = returnFunc(channelID, options...)
	} else {
		r1 = ret.Get(1).(string)
	}
	if returnFunc, ok := ret.Get(2).(func(string, ...slack.MsgOption) error); ok {
		r2 = returnFunc(channelID, options...)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// SlackSender_PostMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostMessage'
type SlackSender_PostMessage_Call struct {
	*mock.Call
}

// PostMessage is a helper method to define mock.On call
//   - channelID string
//   - options ...slack.MsgOption
func (_e *SlackSender_Expecter) PostMessage(channelID interface{}, options ...interface{}) *SlackSender_PostMessage_Call {
	return &SlackSender_PostMessage_Call{Call: _e.mock.On("PostMessage",
		append([]interface{}{channelID}, options...)...)}
}

func (_c *SlackSender_PostMessage_Call) Run(run func(channelID string, options ...slack.MsgOption)) *SlackSender_PostMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []slack.MsgOption
		variadicArgs := make([]slack.MsgOption, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(slack.MsgOption)
			}
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *SlackSender_PostMessage_Call) Return(s string, s1 string, err error) *SlackSender_PostMessage_Call {
	_c.Call.Return(s, s1, err)
	return _c
}

func (_c *SlackSender_PostMessage_Call) RunAndReturn(run func(channelID string, options ...slack.MsgOption) (string, string, error)) *SlackSender_PostMessage_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateView provides a mock function for the type SlackSender
func (_mock *SlackSender) UpdateView(view slack.ModalViewRequest, externalID string, hash string, viewID string) (*slack.ViewResponse, error) {
	ret := _mock.Called(view, externalID, hash, viewID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateView")
	}

	var r0 *slack.ViewResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(slack.ModalViewRequest, string, string, string) (*slack.ViewResponse, error)); ok {
		return returnFunc(view, externalID, hash, viewID)
	}
	if returnFunc, ok := ret.Get(0).(func(slack.ModalViewRequest, string, string, string) *slack.ViewResponse); ok {
		r0 = returnFunc(view, externalID, hash, viewID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slack.ViewResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(slack.ModalViewRequest, string, string, string) error); ok {
		r1 = returnFunc(view, externalID, hash, viewID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// SlackSender_UpdateView_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateView'
type SlackSender_UpdateView_Call struct {
	*mock.Call
}

// UpdateView is a helper method to define mock.On call
//   - view slack.ModalViewRequest
//   - externalID string
//   - hash string
//   - viewID string
func (_e *SlackSender_Expecter) UpdateView(view interface{}, externalID interface{}, hash interface{}, viewID interface{}) *SlackSender_UpdateView_Call {
	return &SlackSender_UpdateView_Call{Call: _e.mock.On("UpdateView", view, externalID, hash, viewID)}
}

func (_c *SlackSender_UpdateView_Call) Run(run func(view slack.ModalViewRequest, externalID string, hash string, viewID string)) *SlackSender_UpdateView_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 slack.ModalViewRequest
		if args[0] != nil {
			arg0 = args[0].(slack.ModalViewRequest)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *SlackSender_UpdateView_Call) Return(viewResponse *slack.ViewResponse, err error) *SlackSender_UpdateView_Call {
	_c.Call.Return(viewResponse, err)
	return _c
}

func (_c *SlackSender_UpdateView_Call) RunAndReturn(run func(view slack.ModalViewRequest, externalID string, hash string, viewID string) (*slack.ViewResponse, error)) *SlackSender_UpdateView_Call {
	_c.Call.Return(run)
	return _c
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// ReportTasks provides a mock function for the type Controller
func (_mock *Controller) ReportTasks() []string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReportTasks")
	}

	var r0 []string
	if returnFunc, ok := ret.Get(0).(func() []string); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	return r0
}

// Controller_ReportTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportTasks'
type Controller_ReportTasks_Call struct {
	*mock.Call
}

// ReportTasks is a helper method to define mock.On call
func (_e *Controller_Expecter) ReportTasks() *Controller_ReportTasks_Call {
	return &Controller_ReportTasks_Call{Call: _e.mock.On("ReportTasks")}
}

func (_c *Controller_ReportTasks_Call) Run(run func()) *Controller_ReportTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Controller_ReportTasks_Call) Return(strings []string) *Controller_ReportTasks_Call {
	_c.Call.Return(strings)
	return _c
}

func (_c *Controller_ReportTasks_Call) RunAndReturn(run func() []string) *Controller_ReportTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewPoller creates a new instance of Poller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPoller(t interface {
	mock.TestingT
	Cleanup(func())
}) *Poller {
	mock := &Poller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Poller is an autogenerated mock type for the Poller type
type Poller struct {
	mock.Mock
}

type Poller_Expecter struct {
	mock *mock.Mock
}

func (_m *Poller) EXPECT() *Poller_Expecter {
	return &Poller_Expecter{mock: &_m.Mock}
}

// Refresh provides a mock function for the type Poller
func (_mock *Poller) Refresh() {
	_mock.Called()
	return
}

// Poller_Refresh_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Refresh'
type Poller_Refresh_Call struct {
	*mock.Call
}

// Refresh is a helper method to define mock.On call
func (_e *Poller_Expecter) Refresh() *Poller_Refresh_Call {
	return &Poller_Refresh_Call{Call: _e.mock.On("Refresh")}
}

func (_c *Poller_Refresh_Call) Run(run func()) *Poller_Refresh_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Poller_Refresh_Call) Return() *Poller_Refresh_Call {
	_c.Call.Return()
	return _c
}

func (_c *Poller_Refresh_Call) RunAndReturn(run func()) *Poller_Refresh_Call {
	_c.Run(run)
	return _c
}

// Subscribe provides a mock function for the type Poller
func (_mock *Poller) Subscribe() <-chan poller.Update {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 <-chan poller.Update
	if returnFunc, ok := ret.Get(0).(func() <-chan poller.Update); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan poller.Update)
		}
	}
	return r0
}

// Poller_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Poller_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
func (_e *Poller_Expecter) Subscribe() *Poller_Subscribe_Call {
	return &Poller_Subscribe_Call{Call: _e.mock.On("Subscribe")}
}

func (_c *Poller_Subscribe_Call) Run(run func()) *Poller_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Poller_Subscribe_Call) Return(updateCh <-chan poller.Update) *Poller_Subscribe_Call {
	_c.Call.Return(updateCh)
	return _c
}

func (_c *Poller_Subscribe_Call) RunAndReturn(run func() <-chan poller.Update) *Poller_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function for the type Poller
func (_mock *Poller) Unsubscribe(updateCh <-chan poller.Update) {
	_mock.Called(updateCh)
	return
}

// Poller_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type Poller_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - updateCh <-chan poller.Update
func (_e *Poller_Expecter) Unsubscribe(updateCh interface{}) *Poller_Unsubscribe_Call {
	return &Poller_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", updateCh)}
}

func (_c *Poller_Unsubscribe_Call) Run(run func(updateCh <-chan poller.Update)) *Poller_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 <-chan poller.Update
		if args[0] != nil {
			arg0 = args[0].(<-chan poller.Update)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *Poller_Unsubscribe_Call) Return() *Poller_Unsubscribe_Call {
	_c.Call.Return()
	return _c
}

func (_c *Poller_Unsubscribe_Call) RunAndReturn(run func(updateCh <-chan poller.Update)) *Poller_Unsubscribe_Call {
	_c.Run(run)
	return _c
}
