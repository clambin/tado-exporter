// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

type Controller_Expecter struct {
	mock *mock.Mock
}

func (_m *Controller) EXPECT() *Controller_Expecter {
	return &Controller_Expecter{mock: &_m.Mock}
}

// ReportTasks provides a mock function with given fields:
func (_m *Controller) ReportTasks() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ReportTasks")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Controller_ReportTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReportTasks'
type Controller_ReportTasks_Call struct {
	*mock.Call
}

// ReportTasks is a helper method to define mock.On call
func (_e *Controller_Expecter) ReportTasks() *Controller_ReportTasks_Call {
	return &Controller_ReportTasks_Call{Call: _e.mock.On("ReportTasks")}
}

func (_c *Controller_ReportTasks_Call) Run(run func()) *Controller_ReportTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Controller_ReportTasks_Call) Return(_a0 []string) *Controller_ReportTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Controller_ReportTasks_Call) RunAndReturn(run func() []string) *Controller_ReportTasks_Call {
	_c.Call.Return(run)
	return _c
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
