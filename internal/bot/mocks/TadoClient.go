// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	tado "github.com/clambin/tado/v2"
	mock "github.com/stretchr/testify/mock"
)

// TadoClient is an autogenerated mock type for the TadoClient type
type TadoClient struct {
	mock.Mock
}

type TadoClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TadoClient) EXPECT() *TadoClient_Expecter {
	return &TadoClient_Expecter{mock: &_m.Mock}
}

// DeletePresenceLockWithResponse provides a mock function with given fields: ctx, homeId, reqEditors
func (_m *TadoClient) DeletePresenceLockWithResponse(ctx context.Context, homeId tado.HomeId, reqEditors ...tado.RequestEditorFn) (*tado.DeletePresenceLockResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePresenceLockWithResponse")
	}

	var r0 *tado.DeletePresenceLockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, ...tado.RequestEditorFn) (*tado.DeletePresenceLockResponse, error)); ok {
		return rf(ctx, homeId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, ...tado.RequestEditorFn) *tado.DeletePresenceLockResponse); ok {
		r0 = rf(ctx, homeId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.DeletePresenceLockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tado.HomeId, ...tado.RequestEditorFn) error); ok {
		r1 = rf(ctx, homeId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_DeletePresenceLockWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeletePresenceLockWithResponse'
type TadoClient_DeletePresenceLockWithResponse_Call struct {
	*mock.Call
}

// DeletePresenceLockWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) DeletePresenceLockWithResponse(ctx interface{}, homeId interface{}, reqEditors ...interface{}) *TadoClient_DeletePresenceLockWithResponse_Call {
	return &TadoClient_DeletePresenceLockWithResponse_Call{Call: _e.mock.On("DeletePresenceLockWithResponse",
		append([]interface{}{ctx, homeId}, reqEditors...)...)}
}

func (_c *TadoClient_DeletePresenceLockWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, reqEditors ...tado.RequestEditorFn)) *TadoClient_DeletePresenceLockWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]tado.RequestEditorFn, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(tado.HomeId), variadicArgs...)
	})
	return _c
}

func (_c *TadoClient_DeletePresenceLockWithResponse_Call) Return(_a0 *tado.DeletePresenceLockResponse, _a1 error) *TadoClient_DeletePresenceLockWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_DeletePresenceLockWithResponse_Call) RunAndReturn(run func(context.Context, tado.HomeId, ...tado.RequestEditorFn) (*tado.DeletePresenceLockResponse, error)) *TadoClient_DeletePresenceLockWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteZoneOverlayWithResponse provides a mock function with given fields: ctx, homeId, zoneId, reqEditors
func (_m *TadoClient) DeleteZoneOverlayWithResponse(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, reqEditors ...tado.RequestEditorFn) (*tado.DeleteZoneOverlayResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId, zoneId)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteZoneOverlayWithResponse")
	}

	var r0 *tado.DeleteZoneOverlayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, ...tado.RequestEditorFn) (*tado.DeleteZoneOverlayResponse, error)); ok {
		return rf(ctx, homeId, zoneId, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, ...tado.RequestEditorFn) *tado.DeleteZoneOverlayResponse); ok {
		r0 = rf(ctx, homeId, zoneId, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.DeleteZoneOverlayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tado.HomeId, tado.ZoneId, ...tado.RequestEditorFn) error); ok {
		r1 = rf(ctx, homeId, zoneId, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_DeleteZoneOverlayWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteZoneOverlayWithResponse'
type TadoClient_DeleteZoneOverlayWithResponse_Call struct {
	*mock.Call
}

// DeleteZoneOverlayWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - zoneId tado.ZoneId
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) DeleteZoneOverlayWithResponse(ctx interface{}, homeId interface{}, zoneId interface{}, reqEditors ...interface{}) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	return &TadoClient_DeleteZoneOverlayWithResponse_Call{Call: _e.mock.On("DeleteZoneOverlayWithResponse",
		append([]interface{}{ctx, homeId, zoneId}, reqEditors...)...)}
}

func (_c *TadoClient_DeleteZoneOverlayWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, reqEditors ...tado.RequestEditorFn)) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]tado.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(tado.HomeId), args[2].(tado.ZoneId), variadicArgs...)
	})
	return _c
}

func (_c *TadoClient_DeleteZoneOverlayWithResponse_Call) Return(_a0 *tado.DeleteZoneOverlayResponse, _a1 error) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_DeleteZoneOverlayWithResponse_Call) RunAndReturn(run func(context.Context, tado.HomeId, tado.ZoneId, ...tado.RequestEditorFn) (*tado.DeleteZoneOverlayResponse, error)) *TadoClient_DeleteZoneOverlayWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetPresenceLockWithResponse provides a mock function with given fields: ctx, homeId, body, reqEditors
func (_m *TadoClient) SetPresenceLockWithResponse(ctx context.Context, homeId tado.HomeId, body tado.SetPresenceLockJSONRequestBody, reqEditors ...tado.RequestEditorFn) (*tado.SetPresenceLockResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetPresenceLockWithResponse")
	}

	var r0 *tado.SetPresenceLockResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.SetPresenceLockJSONRequestBody, ...tado.RequestEditorFn) (*tado.SetPresenceLockResponse, error)); ok {
		return rf(ctx, homeId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.SetPresenceLockJSONRequestBody, ...tado.RequestEditorFn) *tado.SetPresenceLockResponse); ok {
		r0 = rf(ctx, homeId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.SetPresenceLockResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tado.HomeId, tado.SetPresenceLockJSONRequestBody, ...tado.RequestEditorFn) error); ok {
		r1 = rf(ctx, homeId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_SetPresenceLockWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetPresenceLockWithResponse'
type TadoClient_SetPresenceLockWithResponse_Call struct {
	*mock.Call
}

// SetPresenceLockWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - body tado.SetPresenceLockJSONRequestBody
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) SetPresenceLockWithResponse(ctx interface{}, homeId interface{}, body interface{}, reqEditors ...interface{}) *TadoClient_SetPresenceLockWithResponse_Call {
	return &TadoClient_SetPresenceLockWithResponse_Call{Call: _e.mock.On("SetPresenceLockWithResponse",
		append([]interface{}{ctx, homeId, body}, reqEditors...)...)}
}

func (_c *TadoClient_SetPresenceLockWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, body tado.SetPresenceLockJSONRequestBody, reqEditors ...tado.RequestEditorFn)) *TadoClient_SetPresenceLockWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]tado.RequestEditorFn, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(tado.HomeId), args[2].(tado.SetPresenceLockJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *TadoClient_SetPresenceLockWithResponse_Call) Return(_a0 *tado.SetPresenceLockResponse, _a1 error) *TadoClient_SetPresenceLockWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_SetPresenceLockWithResponse_Call) RunAndReturn(run func(context.Context, tado.HomeId, tado.SetPresenceLockJSONRequestBody, ...tado.RequestEditorFn) (*tado.SetPresenceLockResponse, error)) *TadoClient_SetPresenceLockWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// SetZoneOverlayWithResponse provides a mock function with given fields: ctx, homeId, zoneId, body, reqEditors
func (_m *TadoClient) SetZoneOverlayWithResponse(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, body tado.SetZoneOverlayJSONRequestBody, reqEditors ...tado.RequestEditorFn) (*tado.SetZoneOverlayResponse, error) {
	_va := make([]interface{}, len(reqEditors))
	for _i := range reqEditors {
		_va[_i] = reqEditors[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, homeId, zoneId, body)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetZoneOverlayWithResponse")
	}

	var r0 *tado.SetZoneOverlayResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, tado.SetZoneOverlayJSONRequestBody, ...tado.RequestEditorFn) (*tado.SetZoneOverlayResponse, error)); ok {
		return rf(ctx, homeId, zoneId, body, reqEditors...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, tado.HomeId, tado.ZoneId, tado.SetZoneOverlayJSONRequestBody, ...tado.RequestEditorFn) *tado.SetZoneOverlayResponse); ok {
		r0 = rf(ctx, homeId, zoneId, body, reqEditors...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tado.SetZoneOverlayResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, tado.HomeId, tado.ZoneId, tado.SetZoneOverlayJSONRequestBody, ...tado.RequestEditorFn) error); ok {
		r1 = rf(ctx, homeId, zoneId, body, reqEditors...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TadoClient_SetZoneOverlayWithResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetZoneOverlayWithResponse'
type TadoClient_SetZoneOverlayWithResponse_Call struct {
	*mock.Call
}

// SetZoneOverlayWithResponse is a helper method to define mock.On call
//   - ctx context.Context
//   - homeId tado.HomeId
//   - zoneId tado.ZoneId
//   - body tado.SetZoneOverlayJSONRequestBody
//   - reqEditors ...tado.RequestEditorFn
func (_e *TadoClient_Expecter) SetZoneOverlayWithResponse(ctx interface{}, homeId interface{}, zoneId interface{}, body interface{}, reqEditors ...interface{}) *TadoClient_SetZoneOverlayWithResponse_Call {
	return &TadoClient_SetZoneOverlayWithResponse_Call{Call: _e.mock.On("SetZoneOverlayWithResponse",
		append([]interface{}{ctx, homeId, zoneId, body}, reqEditors...)...)}
}

func (_c *TadoClient_SetZoneOverlayWithResponse_Call) Run(run func(ctx context.Context, homeId tado.HomeId, zoneId tado.ZoneId, body tado.SetZoneOverlayJSONRequestBody, reqEditors ...tado.RequestEditorFn)) *TadoClient_SetZoneOverlayWithResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]tado.RequestEditorFn, len(args)-4)
		for i, a := range args[4:] {
			if a != nil {
				variadicArgs[i] = a.(tado.RequestEditorFn)
			}
		}
		run(args[0].(context.Context), args[1].(tado.HomeId), args[2].(tado.ZoneId), args[3].(tado.SetZoneOverlayJSONRequestBody), variadicArgs...)
	})
	return _c
}

func (_c *TadoClient_SetZoneOverlayWithResponse_Call) Return(_a0 *tado.SetZoneOverlayResponse, _a1 error) *TadoClient_SetZoneOverlayWithResponse_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TadoClient_SetZoneOverlayWithResponse_Call) RunAndReturn(run func(context.Context, tado.HomeId, tado.ZoneId, tado.SetZoneOverlayJSONRequestBody, ...tado.RequestEditorFn) (*tado.SetZoneOverlayResponse, error)) *TadoClient_SetZoneOverlayWithResponse_Call {
	_c.Call.Return(run)
	return _c
}

// NewTadoClient creates a new instance of TadoClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTadoClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TadoClient {
	mock := &TadoClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
